// EXPORT SERVICE
// Handles quote generation for print, email, and PDF formats

export class ExportService {
  constructor(formData, calculations, dayRates, gearCosts, settings) {
    this.formData = formData;
    this.calc = calculations;
    this.dayRates = dayRates;
    this.gearCosts = gearCosts;
    this.settings = settings;
  }

  // Format shoot dates for display
  formatShootDates() {
    const { shoot_dates } = this.formData;
    if (!shoot_dates || shoot_dates.length === 0) return "TBD";
    
    const sortedDates = [...shoot_dates].sort((a, b) => new Date(a) - new Date(b));
    
    if (sortedDates.length === 1) {
      return this._formatDate(sortedDates[0], "MMM d, yyyy");
    }
    
    if (sortedDates.length === 2) {
      return `${this._formatDate(sortedDates[0], "MMM d")} - ${this._formatDate(sortedDates[1], "MMM d, yyyy")}`;
    }
    
    return `${this._formatDate(sortedDates[0], "MMM d")} - ${this._formatDate(sortedDates[sortedDates.length - 1], "MMM d, yyyy")} (${sortedDates.length} days)`;
  }

  // Get pricing model description
  getPricingModelDescription() {
    const { day_type, custom_hourly_rate, custom_hours } = this.formData;
    
    switch (day_type) {
      case "custom":
        return `Custom Hourly Rate ($${custom_hourly_rate}/hr for ${custom_hours} hours)`;
      case "half":
        return "Half Day Rates (â‰¤6 hours)";
      case "full":
        return "Full Day Rates (up to 10 hours)";
      default:
        return "No pricing model selected";
    }
  }

  // Get selected role descriptions
  getSelectedRoles() {
    return this.formData.selected_roles?.map(sr => {
      const rate = this.dayRates.find(r => r.id === sr.role_id);
      if (!rate) return null;
      
      let detail = '';
      if (rate.unit_type === 'day') {
        if (this.formData.day_type === "custom") {
          detail = `${sr.quantity || 0} day(s) (${this.formData.custom_hours}h custom)`;
        } else if (this.formData.day_type === "half") {
          detail = `${sr.quantity || 0} half day(s)`;
        } else {
          detail = `${sr.quantity || 0} full day(s)`;
        }
      } else if (rate.unit_type === 'per_5_min') {
        detail = `${sr.minutes_output || 0} minute${(sr.minutes_output || 0) !== 1 ? 's' : ''}`;
      } else if (rate.unit_type === 'per_request') {
        detail = `${sr.requests || 0} request${(sr.requests || 0) !== 1 ? 's' : ''}`;
      }
      
      return { name: rate.role, detail };
    }).filter(Boolean);
  }

  // Get selected gear items
  getSelectedGear() {
    return this.formData.selected_gear_items?.map(gearId => {
      const gear = this.gearCosts.find(g => g.id === gearId);
      return gear ? gear.item : null;
    }).filter(Boolean) || [];
  }

  // Generate plain text for email
  generateEmailText() {
    const shootDatesText = this.formatShootDates();
    const pricingModelText = this.getPricingModelDescription();
    
    return `
Invoice Quote - ${this.formData.project_title || 'Untitled Project'}

Client: ${this.formData.client_name || 'N/A'}
Project: ${this.formData.project_title || 'N/A'}
Shoot Dates: ${shootDatesText}
Pricing Model: ${pricingModelText}

LINE ITEMS:
${this.calc.lineItems?.map(item => `${item.description}: $${item.amount.toFixed(2)}`).join('\n') || ''}

TOTALS:
Labor & Services: $${this.calc.laborSubtotal.toFixed(2)}
${this.calc.gearAmortized > 0 ? `Gear (Amortized): $${this.calc.gearAmortized.toFixed(2)}` : ''}
${this.calc.travelCost > 0 ? `Travel: $${this.calc.travelCost.toFixed(2)}` : ''}
${this.calc.rentalCosts > 0 ? `Rentals: $${this.calc.rentalCosts.toFixed(2)}` : ''}

Subtotal: $${this.calc.subtotal.toFixed(2)}
${this.calc.rushFee > 0 ? `Rush Fee: +$${this.calc.rushFee.toFixed(2)}` : ''}
${this.calc.nonprofitDiscount > 0 ? `Nonprofit Discount: -$${this.calc.nonprofitDiscount.toFixed(2)}` : ''}
Tax: $${this.calc.tax.toFixed(2)}

TOTAL: $${this.calc.total.toFixed(2)}

Deposit Due (${this.settings?.deposit_percent || 50}%): $${this.calc.depositDue.toFixed(2)}
Balance Due: $${this.calc.balanceDue.toFixed(2)}

${this.formData.notes_for_quote ? `\nNotes:\n${this.formData.notes_for_quote}` : ''}

---
Generated by NVision Videographer Calculator
    `.trim();
  }

  // Generate HTML for print (client-facing)
  generateClientHTML() {
    const shootDatesText = this.formatShootDates();
    const pricingModelText = this.getPricingModelDescription();
    
    const companyName = this.settings?.company_name || "NVision Video Production";
    const companyTagline = this.settings?.company_tagline || "Professional Videography Services";
    const companyPhone = this.settings?.company_phone || "";
    const companyEmail = this.settings?.company_email || "";
    const companyWebsite = this.settings?.company_website || "";
    const companyAddress = this.settings?.company_address || "";
    
    return `
      <!DOCTYPE html>
      <html>
      <head>
        <title>Client Quote - ${this.formData.project_title || 'Untitled'}</title>
        <style>${this._getPrintStyles()}</style>
      </head>
      <body>
        <div class="header">
          <h1>${companyName}</h1>
          <p>${companyTagline}</p>
          ${companyPhone || companyEmail || companyWebsite || companyAddress ? `
            <div class="contact-info">
              ${companyAddress ? `<div>${companyAddress}</div>` : ''}
              ${companyPhone ? `<div>Phone: ${companyPhone}</div>` : ''}
              ${companyEmail ? `<div>Email: ${companyEmail}</div>` : ''}
              ${companyWebsite ? `<div>Web: ${companyWebsite}</div>` : ''}
            </div>
          ` : ''}
        </div>

        <div class="section">
          <div class="section-title">Quote Details</div>
          <div class="info-grid">
            <div class="info-label">Client:</div>
            <div>${this.formData.client_name || 'N/A'}</div>
            <div class="info-label">Project:</div>
            <div>${this.formData.project_title || 'N/A'}</div>
            <div class="info-label">Shoot Dates:</div>
            <div>${shootDatesText}</div>
            <div class="info-label">Pricing Model:</div>
            <div>${pricingModelText}</div>
          </div>
        </div>

        <div class="section">
          <div class="section-title">Line Items</div>
          <table class="line-items">
            <thead>
              <tr>
                <th>Description</th>
                <th style="text-align: right; width: 150px;">Amount</th>
              </tr>
            </thead>
            <tbody>
              ${this.calc.lineItems?.map(item => `
                <tr>
                  <td>${item.description}</td>
                  <td style="text-align: right;">$${item.amount.toFixed(2)}</td>
                </tr>
              `).join('') || ''}
            </tbody>
          </table>

          ${this._generateTotalsHTML()}
        </div>

        <div class="deposit-box">
          <div class="deposit-row">
            <span>Deposit Due (${this.settings?.deposit_percent || 50}%):</span>
            <span>$${this.calc.depositDue.toFixed(2)}</span>
          </div>
          <div class="deposit-row">
            <span>Balance Due:</span>
            <span>$${this.calc.balanceDue.toFixed(2)}</span>
          </div>
        </div>

        ${this.formData.notes_for_quote ? `
          <div class="notes">
            <strong>Notes:</strong><br>
            ${this.formData.notes_for_quote.replace(/\n/g, '<br>')}
          </div>
        ` : ''}

        <script>
          window.onload = function() {
            window.print();
          }
        </script>
      </body>
      </html>
    `;
  }

  // Generate HTML for business print (detailed)
  generateBusinessHTML() {
    const shootDatesText = this.formatShootDates();
    const pricingModelText = this.getPricingModelDescription();
    const selectedRoles = this.getSelectedRoles();
    const selectedGear = this.getSelectedGear();
    
    const companyName = this.settings?.company_name || "NVision Video Production";
    const companyTagline = this.settings?.company_tagline || "Professional Videography Services";
    const companyPhone = this.settings?.company_phone || "";
    const companyEmail = this.settings?.company_email || "";
    const companyWebsite = this.settings?.company_website || "";
    const companyAddress = this.settings?.company_address || "";
    
    return `
      <!DOCTYPE html>
      <html>
      <head>
        <title>Business Print - ${this.formData.project_title || 'Untitled'}</title>
        <style>${this._getPrintStyles()}</style>
      </head>
      <body>
        <div class="header">
          <h1>${companyName}</h1>
          <p>${companyTagline}</p>
          ${companyPhone || companyEmail || companyWebsite || companyAddress ? `
            <div class="contact-info">
              ${companyAddress ? `<div>${companyAddress}</div>` : ''}
              ${companyPhone ? `<div>Phone: ${companyPhone}</div>` : ''}
              ${companyEmail ? `<div>Email: ${companyEmail}</div>` : ''}
              ${companyWebsite ? `<div>Web: ${companyWebsite}</div>` : ''}
            </div>
          ` : ''}
        </div>

        <div class="section">
          <div class="section-title">Quote Details</div>
          <div class="info-grid">
            <div class="info-label">Client:</div>
            <div>${this.formData.client_name || 'N/A'}</div>
            <div class="info-label">Project:</div>
            <div>${this.formData.project_title || 'N/A'}</div>
            <div class="info-label">Shoot Dates:</div>
            <div>${shootDatesText}</div>
            <div class="info-label">Pricing Model:</div>
            <div>${pricingModelText}</div>
          </div>
        </div>

        ${(selectedRoles.length > 0 || this.formData.include_audio_pre_post) ? `
          <div class="section">
            <div class="section-title">Selected Services</div>
            <div class="selected-items">
              <ul>
                ${selectedRoles.map(item => `<li>${item.name} - ${item.detail}</li>`).join('')}
                ${this.formData.include_audio_pre_post ? '<li>Audio Pre & Post Production</li>' : ''}
              </ul>
            </div>
          </div>
        ` : ''}

        ${this.formData.gear_enabled && selectedGear.length > 0 ? `
          <div class="section">
            <div class="section-title">Gear & Equipment</div>
            <div class="selected-items">
              <ul>
                ${selectedGear.map(item => `<li>${item}</li>`).join('')}
              </ul>
            </div>
          </div>
        ` : ''}

        ${this.formData.travel_miles > 0 || this.formData.rental_costs > 0 || this.formData.apply_rush_fee || this.formData.apply_nonprofit_discount ? `
          <div class="section">
            <div class="section-title">Additional Details</div>
            <div class="selected-items">
              <ul>
                ${this.formData.travel_miles > 0 ? `<li>Travel: ${this.formData.travel_miles} miles</li>` : ''}
                ${this.formData.rental_costs > 0 ? `<li>Equipment Rentals: $${this.formData.rental_costs.toFixed(2)}</li>` : ''}
                ${this.formData.apply_rush_fee ? `<li>Rush Fee Applied (${this.settings?.rush_fee_percent || 25}%)</li>` : ''}
                ${this.formData.apply_nonprofit_discount ? `<li>Nonprofit Discount Applied (${this.settings?.nonprofit_discount_percent || 15}%)</li>` : ''}
              </ul>
            </div>
          </div>
        ` : ''}

        <div class="section">
          <div class="section-title">Line Items</div>
          <table class="line-items">
            <thead>
              <tr>
                <th>Description</th>
                <th style="text-align: right; width: 150px;">Amount</th>
              </tr>
            </thead>
            <tbody>
              ${this.calc.lineItems?.map(item => `
                <tr>
                  <td>${item.description}</td>
                  <td style="text-align: right;">$${item.amount.toFixed(2)}</td>
                </tr>
              `).join('') || ''}
            </tbody>
          </table>

          ${this._generateTotalsHTML()}
        </div>

        <div class="deposit-box">
          <div class="deposit-row">
            <span>Deposit Due (${this.settings?.deposit_percent || 50}%):</span>
            <span>$${this.calc.depositDue.toFixed(2)}</span>
          </div>
          <div class="deposit-row">
            <span>Balance Due:</span>
            <span>$${this.calc.balanceDue.toFixed(2)}</span>
          </div>
        </div>

        ${this.formData.notes_for_quote ? `
          <div class="notes">
            <strong>Notes:</strong><br>
            ${this.formData.notes_for_quote.replace(/\n/g, '<br>')}
          </div>
        ` : ''}

        <script>
          window.onload = function() {
            window.print();
          }
        </script>
      </body>
      </html>
    `;
  }

  // Helper: Generate totals HTML section
  _generateTotalsHTML() {
    return `
      <div class="totals">
        <div class="total-row">
          <span>Labor & Services:</span>
          <span>$${this.calc.laborSubtotal.toFixed(2)}</span>
        </div>
        ${this.calc.gearAmortized > 0 ? `
          <div class="total-row">
            <span>Gear (Amortized):</span>
            <span>$${this.calc.gearAmortized.toFixed(2)}</span>
          </div>
        ` : ''}
        ${this.calc.travelCost > 0 ? `
          <div class="total-row">
            <span>Travel:</span>
            <span>$${this.calc.travelCost.toFixed(2)}</span>
          </div>
        ` : ''}
        ${this.calc.rentalCosts > 0 ? `
          <div class="total-row">
            <span>Rentals:</span>
            <span>$${this.calc.rentalCosts.toFixed(2)}</span>
          </div>
        ` : ''}
        <div class="total-row subtotal">
          <span>Subtotal:</span>
          <span>$${this.calc.subtotal.toFixed(2)}</span>
        </div>
        ${this.calc.rushFee > 0 ? `
          <div class="total-row" style="color: #f59e0b;">
            <span>Rush Fee:</span>
            <span>+$${this.calc.rushFee.toFixed(2)}</span>
          </div>
        ` : ''}
        ${this.calc.nonprofitDiscount > 0 ? `
          <div class="total-row" style="color: #10b981;">
            <span>Nonprofit Discount:</span>
            <span>-$${this.calc.nonprofitDiscount.toFixed(2)}</span>
          </div>
        ` : ''}
        <div class="total-row">
          <span>Tax:</span>
          <span>$${this.calc.tax.toFixed(2)}</span>
        </div>
        <div class="total-row grand-total">
          <span>TOTAL:</span>
          <span>$${this.calc.total.toFixed(2)}</span>
        </div>
      </div>
    `;
  }

  // Helper: Format date
  _formatDate(dateStr, formatStr) {
    const date = new Date(dateStr);
    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    
    if (formatStr === "MMM d, yyyy") {
      return `${months[date.getMonth()]} ${date.getDate()}, ${date.getFullYear()}`;
    }
    if (formatStr === "MMM d") {
      return `${months[date.getMonth()]} ${date.getDate()}`;
    }
    return dateStr;
  }

  // Helper: Get print styles
  _getPrintStyles() {
    return `
      body {
        font-family: Arial, sans-serif;
        max-width: 800px;
        margin: 40px auto;
        padding: 20px;
        color: #e5e5e5;
        background: #0a0a0a;
      }
      .header {
        text-align: center;
        border-bottom: 2px solid #d4af37;
        padding-bottom: 20px;
        margin-bottom: 30px;
      }
      .header h1 {
        margin: 0;
        color: #d4af37;
        font-size: 32px;
      }
      .header p {
        margin: 5px 0 0 0;
        color: #9ca3af;
      }
      .header .contact-info {
        margin-top: 10px;
        font-size: 12px;
        color: #9ca3af;
      }
      .section {
        margin-bottom: 30px;
      }
      .section-title {
        font-size: 18px;
        font-weight: bold;
        color: #d4af37;
        margin-bottom: 15px;
        border-bottom: 1px solid #2a2a2a;
        padding-bottom: 5px;
      }
      .info-grid {
        display: grid;
        grid-template-columns: 150px 1fr;
        gap: 10px;
        margin-bottom: 15px;
      }
      .info-label {
        font-weight: 600;
        color: #9ca3af;
      }
      .line-items {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 20px;
      }
      .line-items th {
        background: #1a1a1a;
        padding: 12px;
        text-align: left;
        font-weight: 600;
        color: #9ca3af;
        border-bottom: 2px solid #2a2a2a;
      }
      .line-items td {
        padding: 10px 12px;
        border-bottom: 1px solid #2a2a2a;
        color: #e5e5e5;
      }
      .selected-items {
        background: #1a1a1a;
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 20px;
        border: 1px solid #2a2a2a;
      }
      .selected-items h4 {
        margin: 0 0 10px 0;
        color: #9ca3af;
        font-size: 14px;
      }
      .selected-items ul {
        margin: 0;
        padding-left: 20px;
        list-style: disc;
      }
      .selected-items li {
        margin-bottom: 5px;
        color: #e5e5e5;
        font-size: 14px;
      }
      .totals {
        margin-left: auto;
        width: 400px;
        margin-top: 30px;
      }
      .total-row {
        display: flex;
        justify-content: space-between;
        padding: 8px 0;
        font-size: 14px;
        color: #e5e5e5;
      }
      .total-row.subtotal {
        border-top: 1px solid #2a2a2a;
        padding-top: 15px;
        font-weight: 600;
      }
      .total-row.grand-total {
        border-top: 2px solid #d4af37;
        font-size: 20px;
        font-weight: bold;
        color: #d4af37;
        padding-top: 15px;
        margin-top: 15px;
      }
      .deposit-box {
        background: #1a1a1a;
        padding: 20px;
        border-radius: 8px;
        margin-top: 30px;
        border: 1px solid #2a2a2a;
      }
      .deposit-row {
        display: flex;
        justify-content: space-between;
        padding: 5px 0;
        font-weight: 600;
        color: #e5e5e5;
      }
      .notes {
        background: #252525;
        border-left: 4px solid #d4af37;
        padding: 15px;
        margin-top: 30px;
        color: #e5e5e5;
      }
      @media print {
        body {
          margin: 0;
          padding: 20px;
        }
      }
    `;
  }
}